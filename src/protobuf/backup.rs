// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct EntryBatch {
    // message fields
    pub entries: ::protobuf::RepeatedField<super::eraftpb::Entry>,
    pub region_id: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EntryBatch {
    pub fn new() -> EntryBatch {
        ::std::default::Default::default()
    }

    // repeated .eraftpb.Entry entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<super::eraftpb::Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<super::eraftpb::Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<super::eraftpb::Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[super::eraftpb::Entry] {
        &self.entries
    }

    // uint64 region_id = 2;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }
}

impl ::protobuf::Message for EntryBatch {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.region_id != 0 {
            os.write_uint64(2, self.region_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntryBatch {
        EntryBatch::new()
    }

    fn default_instance() -> &'static EntryBatch {
        static mut instance: ::protobuf::lazy::Lazy<EntryBatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EntryBatch,
        };
        unsafe {
            instance.get(EntryBatch::new)
        }
    }
}

impl ::protobuf::Clear for EntryBatch {
    fn clear(&mut self) {
        self.clear_entries();
        self.clear_region_id();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for EntryBatch {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.entries, "entries", buf);
        crate::text::PbPrint::fmt(&self.region_id, "region_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for EntryBatch {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.entries, "entries", &mut s);
        crate::text::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntryBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupEvent {
    // message fields
    pub region_id: u64,
    pub index: u64,
    pub related_region_ids: ::std::vec::Vec<u64>,
    pub event: BackupEvent_Event,
    pub dependency: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupEvent {
    pub fn new() -> BackupEvent {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }

    // uint64 index = 2;

    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    pub fn get_index(&self) -> u64 {
        self.index
    }

    // repeated uint64 related_region_ids = 3;

    pub fn clear_related_region_ids(&mut self) {
        self.related_region_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_related_region_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.related_region_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_related_region_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.related_region_ids
    }

    // Take field
    pub fn take_related_region_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.related_region_ids, ::std::vec::Vec::new())
    }

    pub fn get_related_region_ids(&self) -> &[u64] {
        &self.related_region_ids
    }

    // .backup.BackupEvent.Event event = 4;

    pub fn clear_event(&mut self) {
        self.event = BackupEvent_Event::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: BackupEvent_Event) {
        self.event = v;
    }

    pub fn get_event(&self) -> BackupEvent_Event {
        self.event
    }

    // uint64 dependency = 5;

    pub fn clear_dependency(&mut self) {
        self.dependency = 0;
    }

    // Param is passed by value, moved
    pub fn set_dependency(&mut self, v: u64) {
        self.dependency = v;
    }

    pub fn get_dependency(&self) -> u64 {
        self.dependency
    }
}

impl ::protobuf::Message for BackupEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.related_region_ids)?;
                },
                4 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.event = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.dependency = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.related_region_ids {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.event != BackupEvent_Event::Unknown {
            my_size += ::protobuf::rt::enum_size(4, self.event);
        }
        if self.dependency != 0 {
            my_size += ::protobuf::rt::value_size(5, self.dependency, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        if self.index != 0 {
            os.write_uint64(2, self.index)?;
        }
        for v in &self.related_region_ids {
            os.write_uint64(3, *v)?;
        };
        if self.event != BackupEvent_Event::Unknown {
            os.write_enum(4, self.event.value())?;
        }
        if self.dependency != 0 {
            os.write_uint64(5, self.dependency)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupEvent {
        BackupEvent::new()
    }

    fn default_instance() -> &'static BackupEvent {
        static mut instance: ::protobuf::lazy::Lazy<BackupEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupEvent,
        };
        unsafe {
            instance.get(BackupEvent::new)
        }
    }
}

impl ::protobuf::Clear for BackupEvent {
    fn clear(&mut self) {
        self.clear_region_id();
        self.clear_index();
        self.clear_related_region_ids();
        self.clear_event();
        self.clear_dependency();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupEvent {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", buf);
        crate::text::PbPrint::fmt(&self.index, "index", buf);
        crate::text::PbPrint::fmt(&self.related_region_ids, "related_region_ids", buf);
        crate::text::PbPrint::fmt(&self.event, "event", buf);
        crate::text::PbPrint::fmt(&self.dependency, "dependency", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupEvent {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        crate::text::PbPrint::fmt(&self.index, "index", &mut s);
        crate::text::PbPrint::fmt(&self.related_region_ids, "related_region_ids", &mut s);
        crate::text::PbPrint::fmt(&self.event, "event", &mut s);
        crate::text::PbPrint::fmt(&self.dependency, "dependency", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BackupEvent_Event {
    Unknown = 0,
    Snapshot = 1,
    Split = 2,
    PrepareMerge = 3,
    CommitMerge = 4,
    RollbackMerge = 5,
}

impl ::protobuf::ProtobufEnum for BackupEvent_Event {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BackupEvent_Event> {
        match value {
            0 => ::std::option::Option::Some(BackupEvent_Event::Unknown),
            1 => ::std::option::Option::Some(BackupEvent_Event::Snapshot),
            2 => ::std::option::Option::Some(BackupEvent_Event::Split),
            3 => ::std::option::Option::Some(BackupEvent_Event::PrepareMerge),
            4 => ::std::option::Option::Some(BackupEvent_Event::CommitMerge),
            5 => ::std::option::Option::Some(BackupEvent_Event::RollbackMerge),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BackupEvent_Event] = &[
            BackupEvent_Event::Unknown,
            BackupEvent_Event::Snapshot,
            BackupEvent_Event::Split,
            BackupEvent_Event::PrepareMerge,
            BackupEvent_Event::CommitMerge,
            BackupEvent_Event::RollbackMerge,
        ];
        values
    }
}

impl ::std::marker::Copy for BackupEvent_Event {
}

impl crate::text::PbPrint for BackupEvent_Event {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == BackupEvent_Event::default() {
            return;
        }
        crate::text::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for BackupEvent_Event {
    fn default() -> Self {
        BackupEvent_Event::Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupEvent_Event {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RegionMeta {
    // message fields
    pub region_id: u64,
    pub start_index: u64,
    pub end_index: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RegionMeta {
    pub fn new() -> RegionMeta {
        ::std::default::Default::default()
    }

    // uint64 region_id = 1;

    pub fn clear_region_id(&mut self) {
        self.region_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_region_id(&mut self, v: u64) {
        self.region_id = v;
    }

    pub fn get_region_id(&self) -> u64 {
        self.region_id
    }

    // uint64 start_index = 2;

    pub fn clear_start_index(&mut self) {
        self.start_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_index(&mut self, v: u64) {
        self.start_index = v;
    }

    pub fn get_start_index(&self) -> u64 {
        self.start_index
    }

    // uint64 end_index = 3;

    pub fn clear_end_index(&mut self) {
        self.end_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_index(&mut self, v: u64) {
        self.end_index = v;
    }

    pub fn get_end_index(&self) -> u64 {
        self.end_index
    }
}

impl ::protobuf::Message for RegionMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.region_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_index = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.end_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.region_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.region_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.start_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.end_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.region_id != 0 {
            os.write_uint64(1, self.region_id)?;
        }
        if self.start_index != 0 {
            os.write_uint64(2, self.start_index)?;
        }
        if self.end_index != 0 {
            os.write_uint64(3, self.end_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegionMeta {
        RegionMeta::new()
    }

    fn default_instance() -> &'static RegionMeta {
        static mut instance: ::protobuf::lazy::Lazy<RegionMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RegionMeta,
        };
        unsafe {
            instance.get(RegionMeta::new)
        }
    }
}

impl ::protobuf::Clear for RegionMeta {
    fn clear(&mut self) {
        self.clear_region_id();
        self.clear_start_index();
        self.clear_end_index();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for RegionMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", buf);
        crate::text::PbPrint::fmt(&self.start_index, "start_index", buf);
        crate::text::PbPrint::fmt(&self.end_index, "end_index", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RegionMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.region_id, "region_id", &mut s);
        crate::text::PbPrint::fmt(&self.start_index, "start_index", &mut s);
        crate::text::PbPrint::fmt(&self.end_index, "end_index", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegionMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileMeta {
    // message fields
    pub path: ::std::string::String,
    pub crc32: u32,
    pub content_size: u64,
    pub meta: ::protobuf::RepeatedField<RegionMeta>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FileMeta {
    pub fn new() -> FileMeta {
        ::std::default::Default::default()
    }

    // string path = 1;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }

    // uint32 crc32 = 2;

    pub fn clear_crc32(&mut self) {
        self.crc32 = 0;
    }

    // Param is passed by value, moved
    pub fn set_crc32(&mut self, v: u32) {
        self.crc32 = v;
    }

    pub fn get_crc32(&self) -> u32 {
        self.crc32
    }

    // uint64 content_size = 3;

    pub fn clear_content_size(&mut self) {
        self.content_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_content_size(&mut self, v: u64) {
        self.content_size = v;
    }

    pub fn get_content_size(&self) -> u64 {
        self.content_size
    }

    // repeated .backup.RegionMeta meta = 4;

    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: ::protobuf::RepeatedField<RegionMeta>) {
        self.meta = v;
    }

    // Mutable pointer to the field.
    pub fn mut_meta(&mut self) -> &mut ::protobuf::RepeatedField<RegionMeta> {
        &mut self.meta
    }

    // Take field
    pub fn take_meta(&mut self) -> ::protobuf::RepeatedField<RegionMeta> {
        ::std::mem::replace(&mut self.meta, ::protobuf::RepeatedField::new())
    }

    pub fn get_meta(&self) -> &[RegionMeta] {
        &self.meta
    }
}

impl ::protobuf::Message for FileMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.meta {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.crc32 = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.content_size = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.meta)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if self.crc32 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.crc32, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.content_size != 0 {
            my_size += ::protobuf::rt::value_size(3, self.content_size, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.meta {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if self.crc32 != 0 {
            os.write_uint32(2, self.crc32)?;
        }
        if self.content_size != 0 {
            os.write_uint64(3, self.content_size)?;
        }
        for v in &self.meta {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileMeta {
        FileMeta::new()
    }

    fn default_instance() -> &'static FileMeta {
        static mut instance: ::protobuf::lazy::Lazy<FileMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FileMeta,
        };
        unsafe {
            instance.get(FileMeta::new)
        }
    }
}

impl ::protobuf::Clear for FileMeta {
    fn clear(&mut self) {
        self.clear_path();
        self.clear_crc32();
        self.clear_content_size();
        self.clear_meta();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for FileMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.path, "path", buf);
        crate::text::PbPrint::fmt(&self.crc32, "crc32", buf);
        crate::text::PbPrint::fmt(&self.content_size, "content_size", buf);
        crate::text::PbPrint::fmt(&self.meta, "meta", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for FileMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.path, "path", &mut s);
        crate::text::PbPrint::fmt(&self.crc32, "crc32", &mut s);
        crate::text::PbPrint::fmt(&self.content_size, "content_size", &mut s);
        crate::text::PbPrint::fmt(&self.meta, "meta", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupMeta {
    // message fields
    pub cluster_id: u64,
    pub cluster_version: ::std::string::String,
    pub state: BackupState,
    pub start_dependency: u64,
    pub complete_dependency: u64,
    pub incremental_dependencies: ::std::vec::Vec<u64>,
    pub events: ::protobuf::RepeatedField<BackupEvent>,
    pub files: ::protobuf::RepeatedField<FileMeta>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupMeta {
    pub fn new() -> BackupMeta {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;

    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }

    // string cluster_version = 2;

    pub fn clear_cluster_version(&mut self) {
        self.cluster_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_version(&mut self, v: ::std::string::String) {
        self.cluster_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_version(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_version
    }

    // Take field
    pub fn take_cluster_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_version, ::std::string::String::new())
    }

    pub fn get_cluster_version(&self) -> &str {
        &self.cluster_version
    }

    // .backup.BackupState state = 3;

    pub fn clear_state(&mut self) {
        self.state = BackupState::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: BackupState) {
        self.state = v;
    }

    pub fn get_state(&self) -> BackupState {
        self.state
    }

    // uint64 start_dependency = 5;

    pub fn clear_start_dependency(&mut self) {
        self.start_dependency = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_dependency(&mut self, v: u64) {
        self.start_dependency = v;
    }

    pub fn get_start_dependency(&self) -> u64 {
        self.start_dependency
    }

    // uint64 complete_dependency = 6;

    pub fn clear_complete_dependency(&mut self) {
        self.complete_dependency = 0;
    }

    // Param is passed by value, moved
    pub fn set_complete_dependency(&mut self, v: u64) {
        self.complete_dependency = v;
    }

    pub fn get_complete_dependency(&self) -> u64 {
        self.complete_dependency
    }

    // repeated uint64 incremental_dependencies = 7;

    pub fn clear_incremental_dependencies(&mut self) {
        self.incremental_dependencies.clear();
    }

    // Param is passed by value, moved
    pub fn set_incremental_dependencies(&mut self, v: ::std::vec::Vec<u64>) {
        self.incremental_dependencies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_incremental_dependencies(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.incremental_dependencies
    }

    // Take field
    pub fn take_incremental_dependencies(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.incremental_dependencies, ::std::vec::Vec::new())
    }

    pub fn get_incremental_dependencies(&self) -> &[u64] {
        &self.incremental_dependencies
    }

    // repeated .backup.BackupEvent events = 4;

    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<BackupEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<BackupEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<BackupEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    pub fn get_events(&self) -> &[BackupEvent] {
        &self.events
    }

    // repeated .backup.FileMeta files = 8;

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<FileMeta>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<FileMeta> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<FileMeta> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    pub fn get_files(&self) -> &[FileMeta] {
        &self.files
    }
}

impl ::protobuf::Message for BackupMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_version)?;
                },
                3 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.start_dependency = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.complete_dependency = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.incremental_dependencies)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cluster_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster_version);
        }
        if self.state != BackupState::Unknown {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        if self.start_dependency != 0 {
            my_size += ::protobuf::rt::value_size(5, self.start_dependency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.complete_dependency != 0 {
            my_size += ::protobuf::rt::value_size(6, self.complete_dependency, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.incremental_dependencies {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if !self.cluster_version.is_empty() {
            os.write_string(2, &self.cluster_version)?;
        }
        if self.state != BackupState::Unknown {
            os.write_enum(3, self.state.value())?;
        }
        if self.start_dependency != 0 {
            os.write_uint64(5, self.start_dependency)?;
        }
        if self.complete_dependency != 0 {
            os.write_uint64(6, self.complete_dependency)?;
        }
        for v in &self.incremental_dependencies {
            os.write_uint64(7, *v)?;
        };
        for v in &self.events {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.files {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupMeta {
        BackupMeta::new()
    }

    fn default_instance() -> &'static BackupMeta {
        static mut instance: ::protobuf::lazy::Lazy<BackupMeta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupMeta,
        };
        unsafe {
            instance.get(BackupMeta::new)
        }
    }
}

impl ::protobuf::Clear for BackupMeta {
    fn clear(&mut self) {
        self.clear_cluster_id();
        self.clear_cluster_version();
        self.clear_state();
        self.clear_start_dependency();
        self.clear_complete_dependency();
        self.clear_incremental_dependencies();
        self.clear_events();
        self.clear_files();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupMeta {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        crate::text::PbPrint::fmt(&self.cluster_version, "cluster_version", buf);
        crate::text::PbPrint::fmt(&self.state, "state", buf);
        crate::text::PbPrint::fmt(&self.start_dependency, "start_dependency", buf);
        crate::text::PbPrint::fmt(&self.complete_dependency, "complete_dependency", buf);
        crate::text::PbPrint::fmt(&self.incremental_dependencies, "incremental_dependencies", buf);
        crate::text::PbPrint::fmt(&self.events, "events", buf);
        crate::text::PbPrint::fmt(&self.files, "files", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupMeta {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        crate::text::PbPrint::fmt(&self.cluster_version, "cluster_version", &mut s);
        crate::text::PbPrint::fmt(&self.state, "state", &mut s);
        crate::text::PbPrint::fmt(&self.start_dependency, "start_dependency", &mut s);
        crate::text::PbPrint::fmt(&self.complete_dependency, "complete_dependency", &mut s);
        crate::text::PbPrint::fmt(&self.incremental_dependencies, "incremental_dependencies", &mut s);
        crate::text::PbPrint::fmt(&self.events, "events", &mut s);
        crate::text::PbPrint::fmt(&self.files, "files", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StateStepError {
    // message fields
    pub current: BackupState,
    pub request: BackupState,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl StateStepError {
    pub fn new() -> StateStepError {
        ::std::default::Default::default()
    }

    // .backup.BackupState current = 1;

    pub fn clear_current(&mut self) {
        self.current = BackupState::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: BackupState) {
        self.current = v;
    }

    pub fn get_current(&self) -> BackupState {
        self.current
    }

    // .backup.BackupState request = 2;

    pub fn clear_request(&mut self) {
        self.request = BackupState::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: BackupState) {
        self.request = v;
    }

    pub fn get_request(&self) -> BackupState {
        self.request
    }
}

impl ::protobuf::Message for StateStepError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.current = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.request = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current != BackupState::Unknown {
            my_size += ::protobuf::rt::enum_size(1, self.current);
        }
        if self.request != BackupState::Unknown {
            my_size += ::protobuf::rt::enum_size(2, self.request);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.current != BackupState::Unknown {
            os.write_enum(1, self.current.value())?;
        }
        if self.request != BackupState::Unknown {
            os.write_enum(2, self.request.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StateStepError {
        StateStepError::new()
    }

    fn default_instance() -> &'static StateStepError {
        static mut instance: ::protobuf::lazy::Lazy<StateStepError> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StateStepError,
        };
        unsafe {
            instance.get(StateStepError::new)
        }
    }
}

impl ::protobuf::Clear for StateStepError {
    fn clear(&mut self) {
        self.clear_current();
        self.clear_request();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for StateStepError {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.current, "current", buf);
        crate::text::PbPrint::fmt(&self.request, "request", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for StateStepError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.current, "current", &mut s);
        crate::text::PbPrint::fmt(&self.request, "request", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateStepError {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterIDError {
    // message fields
    pub current: u64,
    pub request: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClusterIDError {
    pub fn new() -> ClusterIDError {
        ::std::default::Default::default()
    }

    // uint64 current = 1;

    pub fn clear_current(&mut self) {
        self.current = 0;
    }

    // Param is passed by value, moved
    pub fn set_current(&mut self, v: u64) {
        self.current = v;
    }

    pub fn get_current(&self) -> u64 {
        self.current
    }

    // uint64 request = 2;

    pub fn clear_request(&mut self) {
        self.request = 0;
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: u64) {
        self.request = v;
    }

    pub fn get_request(&self) -> u64 {
        self.request
    }
}

impl ::protobuf::Message for ClusterIDError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current != 0 {
            my_size += ::protobuf::rt::value_size(1, self.current, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request != 0 {
            my_size += ::protobuf::rt::value_size(2, self.request, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.current != 0 {
            os.write_uint64(1, self.current)?;
        }
        if self.request != 0 {
            os.write_uint64(2, self.request)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterIDError {
        ClusterIDError::new()
    }

    fn default_instance() -> &'static ClusterIDError {
        static mut instance: ::protobuf::lazy::Lazy<ClusterIDError> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterIDError,
        };
        unsafe {
            instance.get(ClusterIDError::new)
        }
    }
}

impl ::protobuf::Clear for ClusterIDError {
    fn clear(&mut self) {
        self.clear_current();
        self.clear_request();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for ClusterIDError {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.current, "current", buf);
        crate::text::PbPrint::fmt(&self.request, "request", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ClusterIDError {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.current, "current", &mut s);
        crate::text::PbPrint::fmt(&self.request, "request", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterIDError {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Error {
    // message fields
    pub msg: ::std::string::String,
    // message oneof groups
    pub detail: ::std::option::Option<Error_oneof_detail>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Error_oneof_detail {
    state_step_error(StateStepError),
    cluster_id_error(ClusterIDError),
    region_error(super::errorpb::Error),
}

impl crate::text::PbPrint for Error_oneof_detail {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            Error_oneof_detail::state_step_error(v) => crate::text::PbPrint::fmt(v, name, buf),
            Error_oneof_detail::cluster_id_error(v) => crate::text::PbPrint::fmt(v, name, buf),
            Error_oneof_detail::region_error(v) => crate::text::PbPrint::fmt(v, name, buf),
        }
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // string msg = 1;

    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    pub fn get_msg(&self) -> &str {
        &self.msg
    }

    // .backup.StateStepError state_step_error = 2;

    pub fn clear_state_step_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_state_step_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::state_step_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_state_step_error(&mut self, v: StateStepError) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::state_step_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_state_step_error(&mut self) -> &mut StateStepError {
        if let ::std::option::Option::Some(Error_oneof_detail::state_step_error(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::state_step_error(StateStepError::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::state_step_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_state_step_error(&mut self) -> StateStepError {
        if self.has_state_step_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::state_step_error(v)) => v,
                _ => panic!(),
            }
        } else {
            StateStepError::new()
        }
    }

    pub fn get_state_step_error(&self) -> &StateStepError {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::state_step_error(ref v)) => v,
            _ => StateStepError::default_instance(),
        }
    }

    // .backup.ClusterIDError cluster_id_error = 3;

    pub fn clear_cluster_id_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_cluster_id_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster_id_error(&mut self, v: ClusterIDError) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_id_error(&mut self) -> &mut ClusterIDError {
        if let ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(ClusterIDError::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster_id_error(&mut self) -> ClusterIDError {
        if self.has_cluster_id_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(v)) => v,
                _ => panic!(),
            }
        } else {
            ClusterIDError::new()
        }
    }

    pub fn get_cluster_id_error(&self) -> &ClusterIDError {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(ref v)) => v,
            _ => ClusterIDError::default_instance(),
        }
    }

    // .errorpb.Error region_error = 4;

    pub fn clear_region_error(&mut self) {
        self.detail = ::std::option::Option::None;
    }

    pub fn has_region_error(&self) -> bool {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::region_error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_region_error(&mut self, v: super::errorpb::Error) {
        self.detail = ::std::option::Option::Some(Error_oneof_detail::region_error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_region_error(&mut self) -> &mut super::errorpb::Error {
        if let ::std::option::Option::Some(Error_oneof_detail::region_error(_)) = self.detail {
        } else {
            self.detail = ::std::option::Option::Some(Error_oneof_detail::region_error(super::errorpb::Error::new()));
        }
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::region_error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_region_error(&mut self) -> super::errorpb::Error {
        if self.has_region_error() {
            match self.detail.take() {
                ::std::option::Option::Some(Error_oneof_detail::region_error(v)) => v,
                _ => panic!(),
            }
        } else {
            super::errorpb::Error::new()
        }
    }

    pub fn get_region_error(&self) -> &super::errorpb::Error {
        match self.detail {
            ::std::option::Option::Some(Error_oneof_detail::region_error(ref v)) => v,
            _ => super::errorpb::Error::default_instance(),
        }
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        if let Some(Error_oneof_detail::state_step_error(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Error_oneof_detail::cluster_id_error(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Error_oneof_detail::region_error(ref v)) = self.detail {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::state_step_error(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::cluster_id_error(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.detail = ::std::option::Option::Some(Error_oneof_detail::region_error(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &Error_oneof_detail::state_step_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Error_oneof_detail::cluster_id_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Error_oneof_detail::region_error(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        if let ::std::option::Option::Some(ref v) = self.detail {
            match v {
                &Error_oneof_detail::state_step_error(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Error_oneof_detail::cluster_id_error(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Error_oneof_detail::region_error(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn default_instance() -> &'static Error {
        static mut instance: ::protobuf::lazy::Lazy<Error> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Error,
        };
        unsafe {
            instance.get(Error::new)
        }
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.clear_msg();
        self.clear_state_step_error();
        self.clear_cluster_id_error();
        self.clear_region_error();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for Error {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.msg, "msg", buf);
        crate::text::PbPrint::fmt(&self.detail, "detail", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.msg, "msg", &mut s);
        crate::text::PbPrint::fmt(&self.detail, "detail", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupRegionRequest {
    // message fields
    pub context: ::protobuf::SingularPtrField<super::kvrpcpb::Context>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupRegionRequest {
    pub fn new() -> BackupRegionRequest {
        ::std::default::Default::default()
    }

    // .kvrpcpb.Context context = 1;

    pub fn clear_context(&mut self) {
        self.context.clear();
    }

    pub fn has_context(&self) -> bool {
        self.context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_context(&mut self, v: super::kvrpcpb::Context) {
        self.context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_context(&mut self) -> &mut super::kvrpcpb::Context {
        if self.context.is_none() {
            self.context.set_default();
        }
        self.context.as_mut().unwrap()
    }

    // Take field
    pub fn take_context(&mut self) -> super::kvrpcpb::Context {
        self.context.take().unwrap_or_else(|| super::kvrpcpb::Context::new())
    }

    pub fn get_context(&self) -> &super::kvrpcpb::Context {
        self.context.as_ref().unwrap_or_else(|| super::kvrpcpb::Context::default_instance())
    }
}

impl ::protobuf::Message for BackupRegionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.context {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.context)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.context.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupRegionRequest {
        BackupRegionRequest::new()
    }

    fn default_instance() -> &'static BackupRegionRequest {
        static mut instance: ::protobuf::lazy::Lazy<BackupRegionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupRegionRequest,
        };
        unsafe {
            instance.get(BackupRegionRequest::new)
        }
    }
}

impl ::protobuf::Clear for BackupRegionRequest {
    fn clear(&mut self) {
        self.clear_context();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupRegionRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.context, "context", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupRegionRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.context, "context", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupRegionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupRegionResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupRegionResponse {
    pub fn new() -> BackupRegionResponse {
        ::std::default::Default::default()
    }

    // .backup.Error error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
}

impl ::protobuf::Message for BackupRegionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupRegionResponse {
        BackupRegionResponse::new()
    }

    fn default_instance() -> &'static BackupRegionResponse {
        static mut instance: ::protobuf::lazy::Lazy<BackupRegionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupRegionResponse,
        };
        unsafe {
            instance.get(BackupRegionResponse::new)
        }
    }
}

impl ::protobuf::Clear for BackupRegionResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupRegionResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.error, "error", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupRegionResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.error, "error", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupRegionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupRequest {
    // message fields
    pub cluster_id: u64,
    pub state: BackupState,
    pub path: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupRequest {
    pub fn new() -> BackupRequest {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;

    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }

    // .backup.BackupState state = 2;

    pub fn clear_state(&mut self) {
        self.state = BackupState::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: BackupState) {
        self.state = v;
    }

    pub fn get_state(&self) -> BackupState {
        self.state
    }

    // string path = 3;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }
}

impl ::protobuf::Message for BackupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != BackupState::Unknown {
            my_size += ::protobuf::rt::enum_size(2, self.state);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if self.state != BackupState::Unknown {
            os.write_enum(2, self.state.value())?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupRequest {
        BackupRequest::new()
    }

    fn default_instance() -> &'static BackupRequest {
        static mut instance: ::protobuf::lazy::Lazy<BackupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupRequest,
        };
        unsafe {
            instance.get(BackupRequest::new)
        }
    }
}

impl ::protobuf::Clear for BackupRequest {
    fn clear(&mut self) {
        self.clear_cluster_id();
        self.clear_state();
        self.clear_path();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        crate::text::PbPrint::fmt(&self.state, "state", buf);
        crate::text::PbPrint::fmt(&self.path, "path", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        crate::text::PbPrint::fmt(&self.state, "state", &mut s);
        crate::text::PbPrint::fmt(&self.path, "path", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackupResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub current_dependency: u64,
    pub state: BackupState,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackupResponse {
    pub fn new() -> BackupResponse {
        ::std::default::Default::default()
    }

    // .backup.Error error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }

    // uint64 current_dependency = 2;

    pub fn clear_current_dependency(&mut self) {
        self.current_dependency = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_dependency(&mut self, v: u64) {
        self.current_dependency = v;
    }

    pub fn get_current_dependency(&self) -> u64 {
        self.current_dependency
    }

    // .backup.BackupState state = 3;

    pub fn clear_state(&mut self) {
        self.state = BackupState::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: BackupState) {
        self.state = v;
    }

    pub fn get_state(&self) -> BackupState {
        self.state
    }
}

impl ::protobuf::Message for BackupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.current_dependency = tmp;
                },
                3 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.state = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.current_dependency != 0 {
            my_size += ::protobuf::rt::value_size(2, self.current_dependency, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.state != BackupState::Unknown {
            my_size += ::protobuf::rt::enum_size(3, self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.current_dependency != 0 {
            os.write_uint64(2, self.current_dependency)?;
        }
        if self.state != BackupState::Unknown {
            os.write_enum(3, self.state.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackupResponse {
        BackupResponse::new()
    }

    fn default_instance() -> &'static BackupResponse {
        static mut instance: ::protobuf::lazy::Lazy<BackupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackupResponse,
        };
        unsafe {
            instance.get(BackupResponse::new)
        }
    }
}

impl ::protobuf::Clear for BackupResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_current_dependency();
        self.clear_state();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for BackupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.error, "error", buf);
        crate::text::PbPrint::fmt(&self.current_dependency, "current_dependency", buf);
        crate::text::PbPrint::fmt(&self.state, "state", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for BackupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.error, "error", &mut s);
        crate::text::PbPrint::fmt(&self.current_dependency, "current_dependency", &mut s);
        crate::text::PbPrint::fmt(&self.state, "state", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RestoreRequest {
    // message fields
    pub cluster_id: u64,
    pub dependency: u64,
    pub path: ::std::string::String,
    pub region_ids: ::std::vec::Vec<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RestoreRequest {
    pub fn new() -> RestoreRequest {
        ::std::default::Default::default()
    }

    // uint64 cluster_id = 1;

    pub fn clear_cluster_id(&mut self) {
        self.cluster_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_id(&mut self, v: u64) {
        self.cluster_id = v;
    }

    pub fn get_cluster_id(&self) -> u64 {
        self.cluster_id
    }

    // uint64 dependency = 2;

    pub fn clear_dependency(&mut self) {
        self.dependency = 0;
    }

    // Param is passed by value, moved
    pub fn set_dependency(&mut self, v: u64) {
        self.dependency = v;
    }

    pub fn get_dependency(&self) -> u64 {
        self.dependency
    }

    // string path = 3;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }

    // repeated uint64 region_ids = 4;

    pub fn clear_region_ids(&mut self) {
        self.region_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_region_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.region_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_region_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.region_ids
    }

    // Take field
    pub fn take_region_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.region_ids, ::std::vec::Vec::new())
    }

    pub fn get_region_ids(&self) -> &[u64] {
        &self.region_ids
    }
}

impl ::protobuf::Message for RestoreRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cluster_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.dependency = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.region_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cluster_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cluster_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.dependency != 0 {
            my_size += ::protobuf::rt::value_size(2, self.dependency, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        for value in &self.region_ids {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cluster_id != 0 {
            os.write_uint64(1, self.cluster_id)?;
        }
        if self.dependency != 0 {
            os.write_uint64(2, self.dependency)?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        for v in &self.region_ids {
            os.write_uint64(4, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RestoreRequest {
        RestoreRequest::new()
    }

    fn default_instance() -> &'static RestoreRequest {
        static mut instance: ::protobuf::lazy::Lazy<RestoreRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RestoreRequest,
        };
        unsafe {
            instance.get(RestoreRequest::new)
        }
    }
}

impl ::protobuf::Clear for RestoreRequest {
    fn clear(&mut self) {
        self.clear_cluster_id();
        self.clear_dependency();
        self.clear_path();
        self.clear_region_ids();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for RestoreRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", buf);
        crate::text::PbPrint::fmt(&self.dependency, "dependency", buf);
        crate::text::PbPrint::fmt(&self.path, "path", buf);
        crate::text::PbPrint::fmt(&self.region_ids, "region_ids", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RestoreRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.cluster_id, "cluster_id", &mut s);
        crate::text::PbPrint::fmt(&self.dependency, "dependency", &mut s);
        crate::text::PbPrint::fmt(&self.path, "path", &mut s);
        crate::text::PbPrint::fmt(&self.region_ids, "region_ids", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RestoreRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RestoreResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RestoreResponse {
    pub fn new() -> RestoreResponse {
        ::std::default::Default::default()
    }

    // .backup.Error error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
}

impl ::protobuf::Message for RestoreResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RestoreResponse {
        RestoreResponse::new()
    }

    fn default_instance() -> &'static RestoreResponse {
        static mut instance: ::protobuf::lazy::Lazy<RestoreResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RestoreResponse,
        };
        unsafe {
            instance.get(RestoreResponse::new)
        }
    }
}

impl ::protobuf::Clear for RestoreResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl crate::text::PbPrint for RestoreResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        crate::text::push_message_start(name, buf);
        let old_len = buf.len();
        crate::text::PbPrint::fmt(&self.error, "error", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RestoreResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        crate::text::PbPrint::fmt(&self.error, "error", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RestoreResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BackupState {
    Unknown = 0,
    Stop = 1,
    Start = 2,
    Complete = 3,
    Incremental = 4,
}

impl ::protobuf::ProtobufEnum for BackupState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BackupState> {
        match value {
            0 => ::std::option::Option::Some(BackupState::Unknown),
            1 => ::std::option::Option::Some(BackupState::Stop),
            2 => ::std::option::Option::Some(BackupState::Start),
            3 => ::std::option::Option::Some(BackupState::Complete),
            4 => ::std::option::Option::Some(BackupState::Incremental),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BackupState] = &[
            BackupState::Unknown,
            BackupState::Stop,
            BackupState::Start,
            BackupState::Complete,
            BackupState::Incremental,
        ];
        values
    }
}

impl ::std::marker::Copy for BackupState {
}

impl crate::text::PbPrint for BackupState {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == BackupState::default() {
            return;
        }
        crate::text::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for BackupState {
    fn default() -> Self {
        BackupState::Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for BackupState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}
